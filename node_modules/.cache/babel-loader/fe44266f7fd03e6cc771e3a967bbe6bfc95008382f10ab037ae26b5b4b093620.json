{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Foye\\\\Documents\\\\Meet-Me-Halfway\\\\src\\\\MapWithDirections.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer, Marker } from \"@react-google-maps/api\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.0060\n}; // Default to NYC\n\nconst MapWithDirections = () => {\n  _s();\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const [originCoords, setOriginCoords] = useState(null);\n  const [destinationCoords, setDestinationCoords] = useState(null);\n  const [midpoint, setMidpoint] = useState(null);\n  const [center, setCenter] = useState(defaultCenter);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\" // Replace with your actual API key\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCenter({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  }, []);\n\n  // Function to convert an address to Lat/Lng using Google Geocoding API\n  const geocodeAddress = async address => {\n    const apiKey = \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\"; // Replace with your actual API key\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.status === \"OK\") {\n        return data.results[0].geometry.location; // Returns { lat, lng }\n      } else {\n        console.error(\"Geocoding failed:\", data.status);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error fetching geocode:\", error);\n      return null;\n    }\n  };\n\n  // Function to calculate the midpoint between two coordinates\n  const calculateMidpoint = (coord1, coord2) => ({\n    lat: (coord1.lat + coord2.lat) / 2,\n    lng: (coord1.lng + coord2.lng) / 2\n  });\n\n  // Fetch directions and set markers for origin, destination, and midpoint\n  const fetchDirections = async () => {\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps not loaded.\");\n      return;\n    }\n    if (!origin || !destination) {\n      alert(\"Please enter both addresses.\");\n      return;\n    }\n    const coords1 = await geocodeAddress(origin);\n    const coords2 = await geocodeAddress(destination);\n    if (!coords1 || !coords2) {\n      alert(\"Invalid addresses. Try again.\");\n      return;\n    }\n    setOriginCoords(coords1);\n    setDestinationCoords(coords2);\n    const midpointCalculated = calculateMidpoint(coords1, coords2);\n    setMidpoint(midpointCalculated);\n    setCenter(midpointCalculated); // Center map at midpoint\n\n    const directionsService = new window.google.maps.DirectionsService();\n    directionsService.route({\n      origin: coords1,\n      destination: coords2,\n      // Destination is the actual destination now\n      travelMode: window.google.maps.TravelMode.DRIVING\n    }, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        setDirectionsResponse(result);\n      } else {\n        console.error(\"Error fetching directions:\", status);\n      }\n    });\n  };\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter first address\",\n        value: origin,\n        onChange: e => setOrigin(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter second address\",\n        value: destination,\n        onChange: e => setDestination(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDirections,\n        children: \"Get Directions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 10,\n      children: [directionsResponse && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: directionsResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 32\n      }, this), originCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: originCoords,\n        label: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 26\n      }, this), destinationCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: destinationCoords,\n        label: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 31\n      }, this), midpoint && /*#__PURE__*/_jsxDEV(Marker, {\n        position: midpoint,\n        label: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/nearby\",\n        children: \"Nearby Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MapWithDirections, \"75I/n0EBzQnuhtmWu4fQiRQAFEY=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapWithDirections;\nexport default MapWithDirections;\nvar _c;\n$RefreshReg$(_c, \"MapWithDirections\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","useJsApiLoader","DirectionsRenderer","Marker","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","defaultCenter","lat","lng","MapWithDirections","_s","origin","setOrigin","destination","setDestination","originCoords","setOriginCoords","destinationCoords","setDestinationCoords","midpoint","setMidpoint","center","setCenter","directionsResponse","setDirectionsResponse","isLoaded","loadError","googleMapsApiKey","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","geocodeAddress","address","apiKey","url","encodeURIComponent","response","fetch","data","json","status","results","geometry","location","calculateMidpoint","coord1","coord2","fetchDirections","window","google","maps","alert","coords1","coords2","midpointCalculated","directionsService","DirectionsService","route","travelMode","TravelMode","DRIVING","result","DirectionsStatus","OK","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","type","placeholder","value","onChange","e","target","onClick","mapContainerStyle","zoom","directions","label","to","_c","$RefreshReg$"],"sources":["C:/Users/Foye/Documents/Meet-Me-Halfway/src/MapWithDirections.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer, Marker } from \"@react-google-maps/api\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"500px\",\r\n};\r\n\r\nconst defaultCenter = { lat: 40.7128, lng: -74.0060 }; // Default to NYC\r\n\r\nconst MapWithDirections = () => {\r\n  const [origin, setOrigin] = useState(\"\");\r\n  const [destination, setDestination] = useState(\"\");\r\n  const [originCoords, setOriginCoords] = useState(null);\r\n  const [destinationCoords, setDestinationCoords] = useState(null);\r\n  const [midpoint, setMidpoint] = useState(null);\r\n  const [center, setCenter] = useState(defaultCenter);\r\n  const [directionsResponse, setDirectionsResponse] = useState(null);\r\n\r\n  const { isLoaded, loadError } = useJsApiLoader({\r\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\", // Replace with your actual API key\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCenter({ lat: latitude, lng: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting location:\", error);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  // Function to convert an address to Lat/Lng using Google Geocoding API\r\n  const geocodeAddress = async (address) => {\r\n    const apiKey = \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\"; // Replace with your actual API key\r\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (data.status === \"OK\") {\r\n        return data.results[0].geometry.location; // Returns { lat, lng }\r\n      } else {\r\n        console.error(\"Geocoding failed:\", data.status);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching geocode:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Function to calculate the midpoint between two coordinates\r\n  const calculateMidpoint = (coord1, coord2) => ({\r\n    lat: (coord1.lat + coord2.lat) / 2,\r\n    lng: (coord1.lng + coord2.lng) / 2,\r\n  });\r\n\r\n  // Fetch directions and set markers for origin, destination, and midpoint\r\n  const fetchDirections = async () => {\r\n    if (!window.google || !window.google.maps) {\r\n      console.error(\"Google Maps not loaded.\");\r\n      return;\r\n    }\r\n\r\n    if (!origin || !destination) {\r\n      alert(\"Please enter both addresses.\");\r\n      return;\r\n    }\r\n\r\n    const coords1 = await geocodeAddress(origin);\r\n    const coords2 = await geocodeAddress(destination);\r\n\r\n    if (!coords1 || !coords2) {\r\n      alert(\"Invalid addresses. Try again.\");\r\n      return;\r\n    }\r\n\r\n    setOriginCoords(coords1);\r\n    setDestinationCoords(coords2);\r\n\r\n    const midpointCalculated = calculateMidpoint(coords1, coords2);\r\n    setMidpoint(midpointCalculated);\r\n    setCenter(midpointCalculated); // Center map at midpoint\r\n\r\n    const directionsService = new window.google.maps.DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: coords1,\r\n        destination: coords2, // Destination is the actual destination now\r\n        travelMode: window.google.maps.TravelMode.DRIVING,\r\n      },\r\n      (result, status) => {\r\n        if (status === window.google.maps.DirectionsStatus.OK) {\r\n          setDirectionsResponse(result);\r\n        } else {\r\n          console.error(\"Error fetching directions:\", status);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter first address\"\r\n          value={origin}\r\n          onChange={(e) => setOrigin(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter second address\"\r\n          value={destination}\r\n          onChange={(e) => setDestination(e.target.value)}\r\n        />\r\n        <button onClick={fetchDirections}>Get Directions</button>\r\n      </div>\r\n\r\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={10}>\r\n        {/* Directions Renderer */}\r\n        {directionsResponse && <DirectionsRenderer directions={directionsResponse} />}\r\n\r\n        {/* Markers for Origin, Destination, and Midpoint */}\r\n        {originCoords && <Marker position={originCoords} label=\"A\" />}\r\n        {destinationCoords && <Marker position={destinationCoords} label=\"B\" />}\r\n        {midpoint && <Marker position={midpoint} label=\"C\" />}\r\n      </GoogleMap>\r\n\r\n      <nav>\r\n        <Link to=\"/nearby\">Nearby Search</Link>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapWithDirections;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}