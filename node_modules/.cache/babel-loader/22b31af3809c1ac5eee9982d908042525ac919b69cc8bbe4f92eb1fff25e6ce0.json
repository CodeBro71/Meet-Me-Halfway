{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Foye\\\\Documents\\\\Meet-Me-Halfway\\\\src\\\\MapWithDirections.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer } from \"@react-google-maps/api\";\nimport NearbySearch from \"./NearbySearch\";\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst google = window.google;\nconst MapWithDirections = () => {\n  _s();\n  const containerStyle = {\n    width: \"100%\",\n    height: \"500px\"\n  };\n  const defaultCenter = {\n    lat: 40.7128,\n    lng: -74.0060\n  }; // Default location (e.g., New York)\n  const [center, setCenter] = useState(defaultCenter);\n\n  // Get user's location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCenter({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation not supported by this browser.\");\n    }\n  }, []);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  var lat_midway = (center.lat + 32.7851) / 2;\n  var lng_midway = (center.lng + -96.9683) / 2;\n  const t = {\n    lat: lat_midway,\n    lng: lng_midway\n  };\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\" // Replace with your API key\n  });\n  const fetchDirections = () => {\n    if (window.google && window.google.maps) {\n      const directionsService = new window.google.maps.DirectionsService();\n      directionsService.route({\n        origin: center,\n        // Times Square\n        destination: {\n          lat: lat_midway,\n          lng: lng_midway\n        },\n        // Central Park\n        travelMode: window.google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          console.log(\"Directions response:\", result);\n          setDirectionsResponse(result); // Update state with the directions\n          window.alert(\"The total distance is \" + result.routes[0].legs[0].distance.text);\n          window.alert(\"The travel time is \" + result.routes[0].legs[0].duration.text);\n        } else {\n          console.error(\"Error fetching directions:\", status); // Log the error\n        }\n      });\n    } else {\n      console.error(\"Google Maps not loaded.\");\n    }\n  };\n  const nearbySearch = () => {\n    const service = new window.google.maps.places.PlacesService(/*map*/);\n    const request = {\n      location: middle,\n      radius: 5000 // Radius in meters\n      // optional parameters  \n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK && results) {\n        results.forEach(place => {\n          new window.google.maps.Marker({\n            position: place.geometry.location\n            //map: map,\n          });\n        });\n      }\n    });\n  };\n  //const [middle, setmiddle] = useState({ lat: lat_midway, lng: lng_midway });\n  let middle = {\n    lat: lat_midway,\n    lng: lng_midway\n  };\n\n  // Render a loading or error state\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchDirections,\n      style: {\n        margin: \"10px\"\n      },\n      children: \"Get Directions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 20,\n      children: directionsResponse && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: directionsResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: {\n          pathname: \"/NearbySearch\",\n          state: t\n        },\n        children: \"NearbySearch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MapWithDirections, \"eECsCGU4MVbXAxyezjIWqmMPcl0=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapWithDirections;\nexport default MapWithDirections;\nvar _c;\n$RefreshReg$(_c, \"MapWithDirections\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","useJsApiLoader","DirectionsRenderer","NearbySearch","BrowserRouter","Router","Routes","Route","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","google","window","MapWithDirections","_s","containerStyle","width","height","defaultCenter","lat","lng","center","setCenter","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","directionsResponse","setDirectionsResponse","lat_midway","lng_midway","t","isLoaded","loadError","googleMapsApiKey","fetchDirections","maps","directionsService","DirectionsService","route","origin","destination","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","log","alert","routes","legs","distance","text","duration","nearbySearch","service","places","PlacesService","request","location","middle","radius","results","PlacesServiceStatus","forEach","place","Marker","geometry","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","margin","mapContainerStyle","zoom","directions","to","pathname","state","_c","$RefreshReg$"],"sources":["C:/Users/Foye/Documents/Meet-Me-Halfway/src/MapWithDirections.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer } from \"@react-google-maps/api\";\r\nimport NearbySearch from \"./NearbySearch\";\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\n\r\nconst google = window.google;\r\nconst MapWithDirections = () => {\r\n  const containerStyle = {\r\n    width: \"100%\",\r\n    height: \"500px\",\r\n  };\r\n\r\n  const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // Default location (e.g., New York)\r\n  const [center, setCenter] = useState(defaultCenter);\r\n\r\n  // Get user's location\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCenter({ lat: latitude, lng: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting location:\", error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation not supported by this browser.\");\r\n    }\r\n  }, []);\r\n\r\n  const [directionsResponse, setDirectionsResponse] = useState(null);\r\n\r\n  var lat_midway = (center.lat + 32.7851) / 2;\r\n  var lng_midway = (center.lng + -96.9683) / 2;\r\n  const t = { lat: lat_midway, lng: lng_midway };\r\n\r\n  const { isLoaded, loadError } = useJsApiLoader({\r\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\", // Replace with your API key\r\n  });\r\n\r\n  const fetchDirections = () => {\r\n    if (window.google && window.google.maps) {\r\n      const directionsService = new window.google.maps.DirectionsService();\r\n\r\n      directionsService.route(\r\n        {\r\n          origin: center, // Times Square\r\n          destination: { lat: lat_midway, lng: lng_midway }, // Central Park\r\n          travelMode: window.google.maps.TravelMode.DRIVING,\r\n        },\r\n        (result, status) => {\r\n          if (status === window.google.maps.DirectionsStatus.OK) {\r\n            console.log(\"Directions response:\", result);\r\n            setDirectionsResponse(result); // Update state with the directions\r\n            window.alert(\"The total distance is \" + result.routes[0].legs[0].distance.text);\r\n            window.alert(\"The travel time is \" + result.routes[0].legs[0].duration.text);\r\n          } else {\r\n            console.error(\"Error fetching directions:\", status); // Log the error\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Google Maps not loaded.\");\r\n    }\r\n  };\r\n  \r\n  const nearbySearch = () => {\r\n    const service = new window.google.maps.places.PlacesService(/*map*/);\r\n    const request = {\r\n        location: middle,\r\n        radius: 5000, // Radius in meters\r\n        // optional parameters  \r\n    };\r\n\r\n    service.nearbySearch(request, (results, status) => {\r\n      if (status === window.google.maps.places.PlacesServiceStatus.OK && results) {\r\n        results.forEach((place) => {\r\n          new window.google.maps.Marker({\r\n            position: place.geometry.location,\r\n            //map: map,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  };\r\n  //const [middle, setmiddle] = useState({ lat: lat_midway, lng: lng_midway });\r\n  let middle = { lat: lat_midway, lng: lng_midway };\r\n\r\n  // Render a loading or error state\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n      <button onClick={fetchDirections} style={{ margin: \"10px\" }}>\r\n        Get Directions\r\n      </button>\r\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={20}>\r\n        {directionsResponse && <DirectionsRenderer directions={directionsResponse} />}\r\n      </GoogleMap>\r\n      <nav>\r\n        <Link to={{ pathname: \"/NearbySearch\", state: t}}>NearbySearch</Link>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapWithDirections;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}