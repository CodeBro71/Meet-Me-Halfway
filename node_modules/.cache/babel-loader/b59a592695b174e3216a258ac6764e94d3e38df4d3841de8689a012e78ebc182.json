{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Foye\\\\Documents\\\\Meet-Me-Halfway\\\\src\\\\MapWithDirections.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer } from \"@react-google-maps/api\";\nimport NearbySearch from \"./NearbySearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst MapWithDirections = () => {\n  _s();\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const [midpoint, setMidpoint] = useState(null);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\"\n  });\n  const geocodeAddress = async address => {\n    const apiKey = \"YOUR_GOOGLE_MAPS_API_KEY\";\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.status === \"OK\") {\n        return data.results[0].geometry.location;\n      } else {\n        console.error(\"Geocoding failed:\", data.status);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error fetching geocode:\", error);\n      return null;\n    }\n  };\n  const calculateMidpoint = (coords1, coords2) => ({\n    lat: (coords1.lat + coords2.lat) / 2,\n    lng: (coords1.lng + coords2.lng) / 2\n  });\n  const fetchDirections = async () => {\n    if (!origin || !destination) {\n      alert(\"Please enter both addresses.\");\n      return;\n    }\n    const coords1 = await geocodeAddress(origin);\n    const coords2 = await geocodeAddress(destination);\n    if (!coords1 || !coords2) {\n      alert(\"Invalid addresses. Try again.\");\n      return;\n    }\n    const newMidpoint = calculateMidpoint(coords1, coords2);\n    setMidpoint(newMidpoint);\n    const directionsService = new window.google.maps.DirectionsService();\n    directionsService.route({\n      origin: coords1,\n      destination: newMidpoint,\n      travelMode: window.google.maps.TravelMode.DRIVING\n    }, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        setDirectionsResponse(result);\n      } else {\n        console.error(\"Error fetching directions:\", status);\n      }\n    });\n  };\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter origin address\",\n        value: origin,\n        onChange: e => setOrigin(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter destination address\",\n        value: destination,\n        onChange: e => setDestination(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDirections,\n        children: \"Find Midpoint & Nearby Places\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: midpoint || {\n        lat: 40.7128,\n        lng: -74.006\n      },\n      zoom: 10,\n      children: directionsResponse && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: directionsResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), midpoint && /*#__PURE__*/_jsxDEV(NearbySearch, {\n      midpoint: midpoint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(MapWithDirections, \"h9/lFNbgaLntaXMejlGfXO80D+U=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapWithDirections;\nexport default MapWithDirections;\nvar _c;\n$RefreshReg$(_c, \"MapWithDirections\");","map":{"version":3,"names":["React","useState","GoogleMap","useJsApiLoader","DirectionsRenderer","NearbySearch","jsxDEV","_jsxDEV","containerStyle","width","height","MapWithDirections","_s","origin","setOrigin","destination","setDestination","midpoint","setMidpoint","directionsResponse","setDirectionsResponse","isLoaded","loadError","googleMapsApiKey","geocodeAddress","address","apiKey","url","encodeURIComponent","response","fetch","data","json","status","results","geometry","location","console","error","calculateMidpoint","coords1","coords2","lat","lng","fetchDirections","alert","newMidpoint","directionsService","window","google","maps","DirectionsService","route","travelMode","TravelMode","DRIVING","result","DirectionsStatus","OK","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","type","placeholder","value","onChange","e","target","onClick","mapContainerStyle","center","zoom","directions","_c","$RefreshReg$"],"sources":["C:/Users/Foye/Documents/Meet-Me-Halfway/src/MapWithDirections.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer } from \"@react-google-maps/api\";\r\nimport NearbySearch from \"./NearbySearch\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"500px\",\r\n};\r\n\r\nconst MapWithDirections = () => {\r\n  const [origin, setOrigin] = useState(\"\");\r\n  const [destination, setDestination] = useState(\"\");\r\n  const [midpoint, setMidpoint] = useState(null);\r\n  const [directionsResponse, setDirectionsResponse] = useState(null);\r\n\r\n  const { isLoaded, loadError } = useJsApiLoader({\r\n    googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\r\n  });\r\n\r\n  const geocodeAddress = async (address) => {\r\n    const apiKey = \"YOUR_GOOGLE_MAPS_API_KEY\"; \r\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (data.status === \"OK\") {\r\n        return data.results[0].geometry.location; \r\n      } else {\r\n        console.error(\"Geocoding failed:\", data.status);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching geocode:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const calculateMidpoint = (coords1, coords2) => ({\r\n    lat: (coords1.lat + coords2.lat) / 2,\r\n    lng: (coords1.lng + coords2.lng) / 2,\r\n  });\r\n\r\n  const fetchDirections = async () => {\r\n    if (!origin || !destination) {\r\n      alert(\"Please enter both addresses.\");\r\n      return;\r\n    }\r\n\r\n    const coords1 = await geocodeAddress(origin);\r\n    const coords2 = await geocodeAddress(destination);\r\n\r\n    if (!coords1 || !coords2) {\r\n      alert(\"Invalid addresses. Try again.\");\r\n      return;\r\n    }\r\n\r\n    const newMidpoint = calculateMidpoint(coords1, coords2);\r\n    setMidpoint(newMidpoint);\r\n\r\n    const directionsService = new window.google.maps.DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: coords1,\r\n        destination: newMidpoint, \r\n        travelMode: window.google.maps.TravelMode.DRIVING,\r\n      },\r\n      (result, status) => {\r\n        if (status === window.google.maps.DirectionsStatus.OK) {\r\n          setDirectionsResponse(result);\r\n        } else {\r\n          console.error(\"Error fetching directions:\", status);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter origin address\"\r\n          value={origin}\r\n          onChange={(e) => setOrigin(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter destination address\"\r\n          value={destination}\r\n          onChange={(e) => setDestination(e.target.value)}\r\n        />\r\n        <button onClick={fetchDirections}>Find Midpoint & Nearby Places</button>\r\n      </div>\r\n\r\n      <GoogleMap mapContainerStyle={containerStyle} center={midpoint || { lat: 40.7128, lng: -74.006 }} zoom={10}>\r\n        {directionsResponse && <DirectionsRenderer directions={directionsResponse} />}\r\n      </GoogleMap>\r\n\r\n      {midpoint && <NearbySearch midpoint={midpoint} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapWithDirections;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}