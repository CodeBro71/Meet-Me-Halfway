{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Foye\\\\Documents\\\\Meet-Me-Halfway\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = () => {\n  _s();\n  const containerStyle = {\n    width: \"100%\",\n    height: \"400px\" // Adjust height as needed\n  };\n  const navigate = useNavigate();\n  const handleRedirect = () => {\n    navigate('/directions'); // Redirect to About page\n  };\n  const defaultCenter = {\n    lat: 40.7128,\n    lng: -74.0060\n  }; // Default location (e.g., New York)\n\n  const [center, setCenter] = useState(defaultCenter);\n\n  // Get user's location\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCenter({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation not supported by this browser.\");\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\",\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 20,\n      children: /*#__PURE__*/_jsxDEV(Marker, {\n        position: center\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: handleRedirect,\n      children: \"Get Directions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"biQVpxt8Nr8ZPxxabgG2uCYnrVc=\", false, function () {\n  return [useNavigate];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","useNavigate","jsxDEV","_jsxDEV","Map","_s","containerStyle","width","height","navigate","handleRedirect","defaultCenter","lat","lng","center","setCenter","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","googleMapsApiKey","children","mapContainerStyle","zoom","fileName","_jsxFileName","lineNumber","columnNumber","onclick","_c","$RefreshReg$"],"sources":["C:/Users/Foye/Documents/Meet-Me-Halfway/src/Map.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Map = () => {\r\n  const containerStyle = {\r\n    width: \"100%\",\r\n    height: \"400px\", // Adjust height as needed\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleRedirect = () => {\r\n    navigate('/directions'); // Redirect to About page\r\n  };\r\n\r\n  const defaultCenter = { lat: 40.7128, lng: -74.0060 }; // Default location (e.g., New York)\r\n\r\n  const [center, setCenter] = useState(defaultCenter);\r\n\r\n  // Get user's location\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCenter({ lat: latitude, lng: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting location:\", error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation not supported by this browser.\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\">\r\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={20}>\r\n        <Marker position={center} />\r\n      </GoogleMap>\r\n      <button onclick={handleRedirect}>Get Directions</button>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,wBAAwB;AACtE,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,cAAc,GAAG;IACrBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,OAAO,CAAE;EACnB,CAAC;EAED,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,cAAc,GAAGA,CAAA,KAAM;IAC3BD,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC3B,CAAC;EAED,MAAME,aAAa,GAAG;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,CAAC;EAAQ,CAAC,CAAC,CAAC;;EAEvD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAACe,aAAa,CAAC;;EAEnD;EACAd,SAAS,CAAC,MAAM;IACd,IAAImB,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZ,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;QAC/CP,SAAS,CAAC;UAAEH,GAAG,EAAEQ,QAAQ;UAAEP,GAAG,EAAEQ;QAAU,CAAC,CAAC;MAC9C,CAAC,EACAE,KAAK,IAAK;QACTC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CACF,CAAC;IACH,CAAC,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAC;IAC7D;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA,CAACJ,UAAU;IAAC0B,gBAAgB,EAAC,yCAAyC;IAAAC,QAAA,gBACpEvB,OAAA,CAACL,SAAS;MAAC6B,iBAAiB,EAAErB,cAAe;MAACQ,MAAM,EAAEA,MAAO;MAACc,IAAI,EAAE,EAAG;MAAAF,QAAA,eACrEvB,OAAA,CAACH,MAAM;QAACmB,QAAQ,EAAEL;MAAO;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eACZ7B,OAAA;MAAQ8B,OAAO,EAAEvB,cAAe;MAAAgB,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEjB,CAAC;AAAC3B,EAAA,CAzCID,GAAG;EAAA,QAMUH,WAAW;AAAA;AAAAiC,EAAA,GANxB9B,GAAG;AA2CT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}