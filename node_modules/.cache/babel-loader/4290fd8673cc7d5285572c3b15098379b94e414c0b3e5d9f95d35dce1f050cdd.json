{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Foye\\\\Documents\\\\Meet-Me-Halfway\\\\src\\\\MergedMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { GoogleMap, useJsApiLoader, DirectionsRenderer, Marker, Autocomplete } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst MergedMap = () => {\n  _s();\n  const [origin, setOrigin] = useState(\"\");\n  const [destination, setDestination] = useState(\"\");\n  const [originCoords, setOriginCoords] = useState(null);\n  const [destinationCoords, setDestinationCoords] = useState(null);\n  const [midpoint, setMidpoint] = useState(null);\n  const [center, setCenter] = useState(defaultCenter);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const [originAutocomplete, setOriginAutocomplete] = useState(null);\n  const [destinationAutocomplete, setDestinationAutocomplete] = useState(null);\n  const [travelMode, setTravelMode] = useState(\"DRIVING\");\n\n  // This ref will hold references to the DirectionsRenderer instances.\n  const directionsRenderersRef = useRef([]);\n  const mapRef = useRef(null);\n  const {\n    isLoaded,\n    loadError\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\",\n    libraries: [\"places\"]\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCenter({\n          lat: latitude,\n          lng: longitude\n        });\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    }\n  }, []);\n  const geocodeAddress = async address => {\n    const apiKey = \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\";\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.status === \"OK\") {\n        return data.results[0].geometry.location;\n      } else {\n        console.error(\"Geocoding failed:\", data.status);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error fetching geocode:\", error);\n      return null;\n    }\n  };\n  const calculateMidpoint = (coord1, coord2) => ({\n    lat: (coord1.lat + coord2.lat) / 2,\n    lng: (coord1.lng + coord2.lng) / 2\n  });\n\n  // Call this function to clear any existing DirectionsRenderer overlays.\n  const clearDirectionsOverlays = () => {\n    directionsRenderersRef.current.forEach(dr => dr.setMap(null));\n    directionsRenderersRef.current = [];\n  };\n  const fetchDirections = async () => {\n    // Clear previous overlays and state values.\n    clearDirectionsOverlays();\n    setDirectionsResponse(null);\n    setOriginCoords(null);\n    setDestinationCoords(null);\n    setMidpoint(null);\n    setPlaces([]);\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps not loaded.\");\n      return;\n    }\n    if (!origin || !destination) {\n      alert(\"Please enter both addresses.\");\n      return;\n    }\n    const coords1 = await geocodeAddress(origin);\n    const coords2 = await geocodeAddress(destination);\n    if (!coords1 || !coords2) {\n      alert(\"Invalid addresses. Try again.\");\n      return;\n    }\n    setOriginCoords(coords1);\n    setDestinationCoords(coords2);\n    const midpointCalculated = calculateMidpoint(coords1, coords2);\n    setMidpoint(midpointCalculated);\n    setCenter(midpointCalculated);\n    const directionsService = new window.google.maps.DirectionsService();\n    directionsService.route({\n      origin: coords1,\n      destination: coords2,\n      travelMode: window.google.maps.TravelMode[travelMode],\n      provideRouteAlternatives: true\n    }, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        setDirectionsResponse(result);\n        fetchNearbyPlaces(midpointCalculated);\n      } else {\n        console.error(\"Error fetching directions:\", status);\n      }\n    });\n  };\n  const fetchNearbyPlaces = midpoint => {\n    if (!midpoint || !window.google || !window.google.maps) {\n      console.error(\"Midpoint or Google Maps API not loaded.\");\n      return;\n    }\n    if (!mapRef.current) {\n      console.error(\"Map reference is not set.\");\n      return;\n    }\n    const service = new window.google.maps.places.PlacesService(mapRef.current);\n    const request = {\n      location: midpoint,\n      radius: 5000\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK && results) {\n        setPlaces(results);\n      } else {\n        console.error(\"Nearby search failed:\", status);\n      }\n    });\n  };\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n        onLoad: autocomplete => setOriginAutocomplete(autocomplete),\n        onPlaceChanged: () => {\n          if (originAutocomplete) {\n            const place = originAutocomplete.getPlace();\n            setOrigin(place.formatted_address || \"\");\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter origin address\",\n          value: origin,\n          onChange: e => setOrigin(e.target.value),\n          style: {\n            width: \"300px\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        onLoad: autocomplete => setDestinationAutocomplete(autocomplete),\n        onPlaceChanged: () => {\n          if (destinationAutocomplete) {\n            const place = destinationAutocomplete.getPlace();\n            setDestination(place.formatted_address || \"\");\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter destination address\",\n          value: destination,\n          onChange: e => setDestination(e.target.value),\n          style: {\n            width: \"300px\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: travelMode,\n        onChange: e => setTravelMode(e.target.value),\n        style: {\n          marginRight: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DRIVING\",\n          children: \"Driving\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"WALKING\",\n          children: \"Walking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"BICYCLING\",\n          children: \"Bicycling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"TRANSIT\",\n          children: \"Transit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDirections,\n        children: \"Get Directions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 10,\n      onLoad: map => mapRef.current = map,\n      children: [directionsResponse && directionsResponse.routes.map((route, index) => /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: {\n          ...directionsResponse,\n          routes: [route]\n        }\n        // Save a reference to each DirectionsRenderer instance.\n        ,\n        onLoad: dr => {\n          directionsRenderersRef.current.push(dr);\n        },\n        onUnmount: dr => {\n          directionsRenderersRef.current = directionsRenderersRef.current.filter(item => item !== dr);\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this)), originCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: originCoords,\n        label: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 26\n      }, this), destinationCoords && /*#__PURE__*/_jsxDEV(Marker, {\n        position: destinationCoords,\n        label: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 31\n      }, this), midpoint && /*#__PURE__*/_jsxDEV(Marker, {\n        position: midpoint,\n        label: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 22\n      }, this), places.map((place, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: place.geometry.location\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MergedMap, \"1b8ygVkQvAev2dyRnWN+taFb1pY=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MergedMap;\nexport default MergedMap;\nvar _c;\n$RefreshReg$(_c, \"MergedMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMap","useJsApiLoader","DirectionsRenderer","Marker","Autocomplete","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","defaultCenter","lat","lng","MergedMap","_s","origin","setOrigin","destination","setDestination","originCoords","setOriginCoords","destinationCoords","setDestinationCoords","midpoint","setMidpoint","center","setCenter","directionsResponse","setDirectionsResponse","places","setPlaces","originAutocomplete","setOriginAutocomplete","destinationAutocomplete","setDestinationAutocomplete","travelMode","setTravelMode","directionsRenderersRef","mapRef","isLoaded","loadError","googleMapsApiKey","libraries","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","geocodeAddress","address","apiKey","url","encodeURIComponent","response","fetch","data","json","status","results","geometry","location","calculateMidpoint","coord1","coord2","clearDirectionsOverlays","current","forEach","dr","setMap","fetchDirections","window","google","maps","alert","coords1","coords2","midpointCalculated","directionsService","DirectionsService","route","TravelMode","provideRouteAlternatives","result","DirectionsStatus","OK","fetchNearbyPlaces","service","PlacesService","request","radius","nearbySearch","PlacesServiceStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","onLoad","autocomplete","onPlaceChanged","place","getPlace","formatted_address","type","placeholder","value","onChange","e","target","marginRight","onClick","mapContainerStyle","zoom","map","routes","index","directions","push","onUnmount","filter","item","label","_c","$RefreshReg$"],"sources":["C:/Users/Foye/Documents/Meet-Me-Halfway/src/MergedMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useJsApiLoader,\r\n  DirectionsRenderer,\r\n  Marker,\r\n  Autocomplete,\r\n} from \"@react-google-maps/api\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"500px\",\r\n};\r\n\r\nconst defaultCenter = { lat: 40.7128, lng: -74.0060 };\r\n\r\nconst MergedMap = () => {\r\n  const [origin, setOrigin] = useState(\"\");\r\n  const [destination, setDestination] = useState(\"\");\r\n  const [originCoords, setOriginCoords] = useState(null);\r\n  const [destinationCoords, setDestinationCoords] = useState(null);\r\n  const [midpoint, setMidpoint] = useState(null);\r\n  const [center, setCenter] = useState(defaultCenter);\r\n  const [directionsResponse, setDirectionsResponse] = useState(null);\r\n  const [places, setPlaces] = useState([]);\r\n  const [originAutocomplete, setOriginAutocomplete] = useState(null);\r\n  const [destinationAutocomplete, setDestinationAutocomplete] = useState(null);\r\n  const [travelMode, setTravelMode] = useState(\"DRIVING\");\r\n\r\n  // This ref will hold references to the DirectionsRenderer instances.\r\n  const directionsRenderersRef = useRef([]);\r\n  const mapRef = useRef(null);\r\n\r\n  const { isLoaded, loadError } = useJsApiLoader({\r\n    googleMapsApiKey: \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\",\r\n    libraries: [\"places\"],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setCenter({ lat: latitude, lng: longitude });\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting location:\", error);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const geocodeAddress = async (address) => {\r\n    const apiKey = \"AIzaSyA2oxgEXddn3TiBypWPBckx0m6iwn5UDyA\";\r\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\r\n      address\r\n    )}&key=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (data.status === \"OK\") {\r\n        return data.results[0].geometry.location;\r\n      } else {\r\n        console.error(\"Geocoding failed:\", data.status);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching geocode:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const calculateMidpoint = (coord1, coord2) => ({\r\n    lat: (coord1.lat + coord2.lat) / 2,\r\n    lng: (coord1.lng + coord2.lng) / 2,\r\n  });\r\n\r\n  // Call this function to clear any existing DirectionsRenderer overlays.\r\n  const clearDirectionsOverlays = () => {\r\n    directionsRenderersRef.current.forEach((dr) => dr.setMap(null));\r\n    directionsRenderersRef.current = [];\r\n  };\r\n\r\n  const fetchDirections = async () => {\r\n    // Clear previous overlays and state values.\r\n    clearDirectionsOverlays();\r\n    setDirectionsResponse(null);\r\n    setOriginCoords(null);\r\n    setDestinationCoords(null);\r\n    setMidpoint(null);\r\n    setPlaces([]);\r\n\r\n    if (!window.google || !window.google.maps) {\r\n      console.error(\"Google Maps not loaded.\");\r\n      return;\r\n    }\r\n    if (!origin || !destination) {\r\n      alert(\"Please enter both addresses.\");\r\n      return;\r\n    }\r\n\r\n    const coords1 = await geocodeAddress(origin);\r\n    const coords2 = await geocodeAddress(destination);\r\n\r\n    if (!coords1 || !coords2) {\r\n      alert(\"Invalid addresses. Try again.\");\r\n      return;\r\n    }\r\n\r\n    setOriginCoords(coords1);\r\n    setDestinationCoords(coords2);\r\n\r\n    const midpointCalculated = calculateMidpoint(coords1, coords2);\r\n    setMidpoint(midpointCalculated);\r\n    setCenter(midpointCalculated);\r\n\r\n    const directionsService = new window.google.maps.DirectionsService();\r\n    directionsService.route(\r\n      {\r\n        origin: coords1,\r\n        destination: coords2,\r\n        travelMode: window.google.maps.TravelMode[travelMode],\r\n        provideRouteAlternatives: true,\r\n      },\r\n      (result, status) => {\r\n        if (status === window.google.maps.DirectionsStatus.OK) {\r\n          setDirectionsResponse(result);\r\n          fetchNearbyPlaces(midpointCalculated);\r\n        } else {\r\n          console.error(\"Error fetching directions:\", status);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const fetchNearbyPlaces = (midpoint) => {\r\n    if (!midpoint || !window.google || !window.google.maps) {\r\n      console.error(\"Midpoint or Google Maps API not loaded.\");\r\n      return;\r\n    }\r\n    if (!mapRef.current) {\r\n      console.error(\"Map reference is not set.\");\r\n      return;\r\n    }\r\n    const service = new window.google.maps.places.PlacesService(mapRef.current);\r\n    const request = {\r\n      location: midpoint,\r\n      radius: 5000,\r\n    };\r\n\r\n    service.nearbySearch(request, (results, status) => {\r\n      if (\r\n        status === window.google.maps.places.PlacesServiceStatus.OK &&\r\n        results\r\n      ) {\r\n        setPlaces(results);\r\n      } else {\r\n        console.error(\"Nearby search failed:\", status);\r\n      }\r\n    });\r\n  };\r\n\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <Autocomplete\r\n          onLoad={(autocomplete) => setOriginAutocomplete(autocomplete)}\r\n          onPlaceChanged={() => {\r\n            if (originAutocomplete) {\r\n              const place = originAutocomplete.getPlace();\r\n              setOrigin(place.formatted_address || \"\");\r\n            }\r\n          }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter origin address\"\r\n            value={origin}\r\n            onChange={(e) => setOrigin(e.target.value)}\r\n            style={{ width: \"300px\", marginRight: \"10px\" }}\r\n          />\r\n        </Autocomplete>\r\n\r\n        <Autocomplete\r\n          onLoad={(autocomplete) => setDestinationAutocomplete(autocomplete)}\r\n          onPlaceChanged={() => {\r\n            if (destinationAutocomplete) {\r\n              const place = destinationAutocomplete.getPlace();\r\n              setDestination(place.formatted_address || \"\");\r\n            }\r\n          }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter destination address\"\r\n            value={destination}\r\n            onChange={(e) => setDestination(e.target.value)}\r\n            style={{ width: \"300px\", marginRight: \"10px\" }}\r\n          />\r\n        </Autocomplete>\r\n\r\n        <select\r\n          value={travelMode}\r\n          onChange={(e) => setTravelMode(e.target.value)}\r\n          style={{ marginRight: \"10px\" }}\r\n        >\r\n          <option value=\"DRIVING\">Driving</option>\r\n          <option value=\"WALKING\">Walking</option>\r\n          <option value=\"BICYCLING\">Bicycling</option>\r\n          <option value=\"TRANSIT\">Transit</option>\r\n        </select>\r\n\r\n        <button onClick={fetchDirections}>Get Directions</button>\r\n      </div>\r\n\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={center}\r\n        zoom={10}\r\n        onLoad={(map) => (mapRef.current = map)}\r\n      >\r\n        {directionsResponse &&\r\n          directionsResponse.routes.map((route, index) => (\r\n            <DirectionsRenderer\r\n              key={index}\r\n              directions={{ ...directionsResponse, routes: [route] }}\r\n              // Save a reference to each DirectionsRenderer instance.\r\n              onLoad={(dr) => {\r\n                directionsRenderersRef.current.push(dr);\r\n              }}\r\n              onUnmount={(dr) => {\r\n                directionsRenderersRef.current = directionsRenderersRef.current.filter(\r\n                  (item) => item !== dr\r\n                );\r\n              }}\r\n            />\r\n          ))}\r\n        {originCoords && <Marker position={originCoords} label=\"A\" />}\r\n        {destinationCoords && <Marker position={destinationCoords} label=\"B\" />}\r\n        {midpoint && <Marker position={midpoint} label=\"C\" />}\r\n        {places.map((place, index) => (\r\n          <Marker key={index} position={place.geometry.location} />\r\n        ))}\r\n      </GoogleMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MergedMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}